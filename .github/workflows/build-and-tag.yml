name: ESP32 Firmware Build and Tag
on:
  push:
    branches:
      - 'main'
    tags: []
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: n-vr/setup-platformio-action@v1
      - name: Create dummy credentials
        run: |
          cat <<'EOF' > src/credentials.h
          #pragma once
          extern const char* WIFI_SSID;
          extern const char* WIFI_PASSWORD;
          extern const char* OTA_PASSWORD;
          extern const char* PUSHOVER_TOKEN;
          extern const char* PUSHOVER_USER;
          extern const char* MQTT_USER;
          extern const char* MQTT_PASSWORD;
          EOF
          cat <<'EOF' > src/credentials.cpp
          #include "credentials.h"
          const char* WIFI_SSID = "";
          const char* WIFI_PASSWORD = "";
          const char* OTA_PASSWORD = "";
          const char* PUSHOVER_TOKEN = "";
          const char* PUSHOVER_USER = "";
          const char* MQTT_USER = "";
          const char* MQTT_PASSWORD = "";
          EOF
      - name: Build firmware
        id: build
        run: |
          pio run | tee build.log
          RAM=$(grep -Eo 'RAM:.*' build.log | grep -Eo '[0-9.]+%' | head -1)
          FLASH=$(grep -Eo 'Flash:.*' build.log | grep -Eo '[0-9.]+%' | head -1)
          echo "ram=$RAM" >> $GITHUB_OUTPUT
          echo "flash=$FLASH" >> $GITHUB_OUTPUT
      - name: Find pull request
        if: github.event_name == 'pull_request'
        id: pr
        uses: jwalton/gh-find-current-pr@v1
      - name: Find existing comment
        if: github.event_name == 'pull_request'
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '**ESP32 Firmware Build Report**'
      - name: Update build report comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: |
            **ESP32 Firmware Build Report**
            
            üìÖ **Latest Build:** ${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at }}
            üîó **Commit:** [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            **Memory Usage:**
            - Flash: ${{ steps.build.outputs.flash }}
            - RAM: ${{ steps.build.outputs.ram }}
            
            *Updated automatically with latest build information*
      - name: Analyze version impact for PR
        if: github.event_name == 'pull_request'
        id: pr_version_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
          echo "Analyzing PR for version impact..."
          python scripts/version_manager.py --dry-run --analyze-pr=${{ github.event.number }} --github-token="${GITHUB_TOKEN}" > pr_analysis.txt 2>&1 || true
          
          # Extract suggested increment
          if grep -q "Version increment type:" pr_analysis.txt; then
            INCREMENT=$(grep "Version increment type:" pr_analysis.txt | cut -d: -f2 | xargs)
            echo "suggested_increment=$INCREMENT" >> $GITHUB_OUTPUT
          else
            echo "suggested_increment=none" >> $GITHUB_OUTPUT
          fi
          
          # Save analysis for comment
          echo 'PR_ANALYSIS<<EOF' >> $GITHUB_ENV
          cat pr_analysis.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Update PR comment with version analysis
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            **ESP32 Firmware Build Report**
            
            üìÖ **Latest Build:** ${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at }}
            üîó **Commit:** [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            **Memory Usage:**
            - Flash: ${{ steps.build.outputs.flash }}
            - RAM: ${{ steps.build.outputs.ram }}
            
            **üè∑Ô∏è Version Impact Analysis:**
            - **Suggested increment:** `${{ steps.pr_version_analysis.outputs.suggested_increment }}`
            
            <details>
            <summary>üìã Detailed Analysis</summary>
            
            ```
            ${{ env.PR_ANALYSIS }}
            ```
            </details>
            
            > **Note:** Add labels `major`, `minor`, or `patch` to override automatic version detection.
            > Only source code changes trigger version increments - infrastructure changes are ignored.
            
            *Updated automatically with latest build and version analysis*
      - name: Install Python dependencies
        if: github.event_name == 'push'
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Smart version analysis and update
        if: github.event_name == 'push'
        id: smart_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running smart version analysis..."
          
          # Run the version manager to analyze changes and update version if needed
          if python scripts/version_manager.py --github-token="${GITHUB_TOKEN}"; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Extract the updated version from config.cpp
          VERSION=$(sed -n 's/^const char\* firmwareVersion = "\(.*\)";/\1/p' src/config.cpp)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"
      - name: Commit version updates
        if: github.event_name == 'push' && steps.smart_version.outputs.version_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/config.cpp README.md
          git commit -m "Automatic version update to v${{ steps.smart_version.outputs.version }}" || echo "No changes to commit"
          git push || echo "No changes to push"
      - name: Create version tag
        if: success() && github.event_name == 'push' && steps.smart_version.outputs.version_changed == 'true'
        uses: rickstaa/action-create-tag@v1
        with:
          tag: v${{ steps.smart_version.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}