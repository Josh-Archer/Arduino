name: Build and tag

on:
  push:
    branches:
      - 'main'
    tags: []
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: n-vr/setup-platformio-action@v1
      - name: Create dummy credentials
        run: |
          cat <<'EOF' > src/credentials.h
          #pragma once
          extern const char* WIFI_SSID;
          extern const char* WIFI_PASSWORD;
          extern const char* OTA_PASSWORD;
          extern const char* PUSHOVER_TOKEN;
          extern const char* PUSHOVER_USER;
          extern const char* MQTT_USER;
          extern const char* MQTT_PASSWORD;
          EOF
          cat <<'EOF' > src/credentials.cpp
          #include "credentials.h"
          const char* WIFI_SSID = "";
          const char* WIFI_PASSWORD = "";
          const char* OTA_PASSWORD = "";
          const char* PUSHOVER_TOKEN = "";
          const char* PUSHOVER_USER = "";
          const char* MQTT_USER = "";
          const char* MQTT_PASSWORD = "";
          EOF
      - name: Build
        id: build
        run: |
          pio run | tee build.log
          RAM=$(grep -Eo 'RAM:.*' build.log | grep -Eo '[0-9.]+%' | head -1)
          FLASH=$(grep -Eo 'Flash:.*' build.log | grep -Eo '[0-9.]+%' | head -1)
          echo "ram=$RAM" >> $GITHUB_OUTPUT
          echo "flash=$FLASH" >> $GITHUB_OUTPUT
      - name: Find pull request
        if: github.event_name == 'pull_request'
        id: pr
        uses: jwalton/gh-find-current-pr@v1
      - name: Find existing comment
        if: github.event_name == 'pull_request'
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '**Memory Usage**'
      - name: Comment memory usage
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: |
            **Memory Usage**
            - Flash: ${{ steps.build.outputs.flash }}
            - RAM: ${{ steps.build.outputs.ram }}
      - name: Extract version
        if: github.event_name == 'push'
        id: get_version
        run: |
          VERSION=$(sed -n 's/^const char\* firmwareVersion = "\(.*\)";/\1/p' src/config.cpp)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Check for source code changes
        id: check_changes
        if: github.event_name == 'push'
        run: |
          # Only tag commits that contain source code changes, not infrastructure-only changes
          # Source paths: src/, data/ (ESP32 core functionality)
          # Infrastructure paths: .github/, k8s/, scripts/, web/, platformio.ini, README.md, etc.
          
          # Get the list of changed files in this push
          # For merge commits, compare with the first parent to get all changes from the merged branch
          if [ $(git rev-list --count ${{ github.event.before }}..${{ github.sha }}) -gt 1 ]; then
            # Multiple commits, likely a merge - check all files changed
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
          else
            # Single commit - check files changed in this commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Define source code paths that should trigger tagging
          SOURCE_PATHS="^(src/|data/)"
          
          # Check if any changed files match source code paths
          HAS_SOURCE_CHANGES=false
          while IFS= read -r file; do
            if echo "$file" | grep -qE "$SOURCE_PATHS"; then
              echo "Source code file changed: $file"
              HAS_SOURCE_CHANGES=true
            fi
          done <<< "$CHANGED_FILES"
          
          echo "has_source_changes=$HAS_SOURCE_CHANGES" >> $GITHUB_OUTPUT
          
          if [ "$HAS_SOURCE_CHANGES" = "true" ]; then
            echo "✅ Source code changes detected - will proceed with tagging"
          else
            echo "ℹ️ Only infrastructure changes detected - skipping tagging"
          fi
      - name: Tag commit
        if: success() && github.event_name == 'push' && steps.check_changes.outputs.has_source_changes == 'true'
        uses: rickstaa/action-create-tag@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}